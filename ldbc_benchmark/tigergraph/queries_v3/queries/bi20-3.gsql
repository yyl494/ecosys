# I have not validate this query
USE GRAPH ldbc_snb
SET syntax_version = "v2"
CREATE OR REPLACE DISTRIBUTED QUERY bi20_add_weighted_edges(STRING company, VERTEX<Person> person2Id) {
  OrAccum<BOOL> @visited;
  MapAccum<VERTEX<Person>, MinAccum<UINT>> @pyear;

  S = {person2Id};
  S = SELECT p FROM S -(KNOWS*0..2)- Person:p ACCUM p.@visited += true;
  U = SELECT u FROM S:s -(STUDY_AT>:e)- University:u
    ACCUM u.@pyear += (s -> e.classYear);
  S = SELECT p1 FROM University:u -(<STUDY_AT:e)- Person:p1
    WHERE p1.@visited
    ACCUM 
      FOREACH (p2,y) IN u.@pyear DO
        IF p2.id > p1.id THEN
          p1.@pyear += (p2-> abs(y-e.classYear) +1 )
        END
      END;
    
  // INTERSECT and CONTAINS not supported here
  S = SELECT p1 FROM S:p1 -(KNOWS)- Person:p2
    WHERE p2.@visited AND p2.id > p1.id AND p1.@pyear.containsKey(p2) 
    ACCUM 
      INSERT INTO WEIGHT_DOUBLE (FROM, TO, weight) VALUES (p1 Person, p2 Person, p1.@pyear.get(p2) );
}

CREATE OR REPLACE DISTRIBUTED QUERY bi20(STRING company, VERTEX<Person> person2Id) {
  TYPEDEF TUPLE<UINT person1Id, UINT totalWeight> RESULT;
  HeapAccum<RESULT>(20, totalWeight ASC, person1Id ASC) @@result;  
  OrAccum @visited, @next, @inCompany;
  MapAccum<VERTEX<Person>, MapAccum<VERTEX<Person>, MinAccum<UINT>>> @@weight;
  MinAccum<UINT> @dist; 
  MapAccum<UINT, MinAccum<UINT>> @@paths;
  UINT threshold;
  threshold = 40;
  S1 =
    SELECT p
    FROM Company:c -(<WORK_AT)- Person:p
    WHERE c.name == company AND p != person2Id
    ACCUM p.@inCompany += true;
  
  S = {person2Id};
  S = Select s FROM S:s ACCUM s.@visited += true, s.@dist += 0;
  WHILE S.size()>0 DO
    S = SELECT t FROM S:s-(WEIGHT_DOUBLE:e)-Person:t 
      ACCUM 
        UINT t_dis = s.@dist + e.weight,
        IF t_dis < t.@dist AND t_dis < threshold THEN
          t.@dist += t_dis,
          t.@next += true
        END
      HAVING t.@next;
    S = SELECT s FROM S:s  
      ACCUM s.@next = false, 
        IF s.@inCompany THEN @@paths += (s.id -> s.@dist) END;
      #HAVING NOT s.@inCompany;
    # Update the threshold
    IF S.size()>0 AND @@paths.size() >= 20 THEN
      @@result.clear();
      FOREACH (p,dist) IN @@paths DO
        @@result += RESULT(p,dist);
      END;
      FOREACH i IN RANGE[0, 19] DO
        threshold = @@result.pop().totalWeight;
      END; 
    END;
    
  END; # WHILE 
  FOREACH (p,dist) IN @@paths DO
    @@result += RESULT(p,dist);
  END;
  PRINT @@result;
}

CREATE OR REPLACE DISTRIBUTED QUERY bi20_delete_weighted_edges() {
  tmp =
    SELECT v2
    FROM :v1 -(WEIGHT_DOUBLE:e)- :v2
    ACCUM DELETE (e);
}

INSTALL QUERY bi20, bi20_add_weighted_edges, bi20_delete_weighted_edges
